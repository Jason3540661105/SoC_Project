/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */
//initial head file
#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"

//additional head file
#include "xparameters.h"
#include "xscugic.h"		//包含中斷管理和處理有關的函數
#include "xil_exception.h"	//異常處理和中斷處裡的函數與定義
#include "xgpio.h"			//
#include "xuartps.h"		//包含UART有關得函數
#include "sleep.h"			//延遲時間函數

// Parameter definitions
#define INTC_DEVICE_ID 			XPAR_PS7_SCUGIC_0_DEVICE_ID
#define LEDS_DEVICE_ID			XPAR_AXI_GPIO_0_DEVICE_ID					//led8bits
#define BTNS_DEVICE_ID			XPAR_AXI_GPIO_1_DEVICE_ID					//btn5bits

#define INTC_GPIO_INTERRUPT_ID 	XPAR_FABRIC_AXI_GPIO_1_IP2INTC_IRPT_INTR	//我猜是[PS]設定的中斷接口
#define BTN_INT 				XGPIO_IR_CH1_MASK

// definitions Map
#define Map1_HEIGHT 9
#define Map1_WIDTH 8

//volatile : 每次訪問時從記憶體中重新讀取其值
volatile static u32 ByteSend = 0 , TotalByteSend = 0;
volatile static int map[Map1_HEIGHT][Map1_WIDTH]= {0};

int init_map[Map1_HEIGHT][Map1_WIDTH] =
	{
		{0, 0, 1, 1, 1, 1, 1, 0},
		{1, 1, 1, 0, 0, 0, 1, 0},
		{1, 3, 5, 4, 0, 0, 1, 0},
		{1, 1, 1, 0, 4, 3, 1, 0},
		{1, 3, 1, 1, 4, 0, 1, 0},
		{1, 0, 1, 0, 3, 0, 1, 1},
		{1, 4, 0, 0, 4, 4, 3, 1},
		{1, 0, 0, 0, 3, 0, 0, 1},
		{1, 1, 1, 1, 1, 1, 1, 1}
	};

static int led_data;
static int btn_value;
static u8 TransmitBuffer[Map1_HEIGHT * Map1_WIDTH + 1] = {0};	//儲存轉換後map的一維陣列，共有:73bits

XUartPs_Config *Config_1;	//宣告"Config_1"的指標變數，並使用「XUartPs_Config」的結構
XUartPs Uart_PS_1;			//Declare The instance of the UART Driver

XGpio LEDInst, BTNInst;
XScuGic INTCInst;

//----------------------------------------------------
// PROTOTYPE FUNCTIONS (自己寫的函示)
//----------------------------------------------------

/*static : 限定函示只能在該文件使用，不能被其他程式調用*/

//1. UART-Send Data-Partial
static int	Uart_Init(void);
static int	Uart_SendData_test(void *InstancePtr);

//2. Button-interrupt-partial
static int 	InterruptSystemSetup(XScuGic *XScuGicInstancePtr);
static int 	IntcInitFunction_BTN(u16 DeviceId, XGpio *GpioInstancePtr);
static void	BTN_Intr_Handler(void *baseaddr_p);
static void	MapToArray(u8 *byteArray, int map[Map1_HEIGHT][Map1_WIDTH]);


int main()
{
    init_platform();
    int status;

    	// Initialise LEDs
    	status = XGpio_Initialize(&LEDInst, LEDS_DEVICE_ID);
    	if (status != XST_SUCCESS)
    		return XST_FAILURE;

    	// Initialise Push Buttons
    	status = XGpio_Initialize(&BTNInst, BTNS_DEVICE_ID);
    	if (status != XST_SUCCESS)
    		return XST_FAILURE;

    	// Initialise UART Setup
    	if(Uart_Init() == XST_FAILURE){
    		return XST_FAILURE;
    	}
    	else{
    		printf("Uart Initialization Successful!");
    	}

    	// Set LEDs direction to outputs
    	XGpio_SetDataDirection(&LEDInst, 1, 0x00);

    	// Set all buttons direction to inputs
    	XGpio_SetDataDirection(&BTNInst, 1, 0xFF);

    	// Initialize interrupt controller
    	status = IntcInitFunction_BTN(INTC_DEVICE_ID, &BTNInst);
    	if (status != XST_SUCCESS)
    		return XST_FAILURE;

    	XGpio LED_XGpio;			// 宣告一個GPIO用的結構.
    	int LED_num = 0b00000000;	// 宣告一個變數,做運算用暫存用.

    	XGpio_Initialize(&LED_XGpio, XPAR_AXI_GPIO_0_DEVICE_ID);	// 初始化LED_XGpio.並連接到AXI_GPIO_0的設備
    	XGpio_SetDataDirection(&LED_XGpio, 1, 0x00);				// 設置通道.(&LED_XGpio, 1, 0) 0或0x00代表資料輸出

    	printf("\nStart!!!\n");

    	while(1) {
    			LED_num = LED_num + 1;
    	    	//printf("Main Count_LED_num = 0x%d\n", LED_num);
    	    	//XGpio_DiscreteWrite(&LED_XGpio, 1, LED_num);		// LED_XGpio通道,送LED_num值進去.
    	    	usleep(500000);
    	    }
    	return 0;
    cleanup_platform();
    return 0;
}


//----------------------------------------------------
// 1. UART-Send Data-Partial
//----------------------------------------------------

//1.1 UART-Setup-initialization
int Uart_Init(void){
	int status = 0;

	/*1.在「xparameters.h」中尋找「是否有符合」的設備ID*/
	Config_1 = XUartPs_LookupConfig(XPAR_XUARTPS_0_DEVICE_ID);
	if (NULL == Config_1) {
		return XST_FAILURE;
	}

	/*UART初始化確認檢查*/
	status = XUartPs_CfgInitialize(&Uart_PS_1, Config_1, Config_1->BaseAddress);
	if (status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	/*設置UART的BaudRate*/
	status = XUartPs_SetBaudRate(&Uart_PS_1,115200);
	if (status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	/*設置UART的操作模式*/
	XUartPs_SetOperMode(&Uart_PS_1, XUARTPS_OPER_MODE_NORMAL);


	XUartPs_WriteReg(Uart_PS_1.Config.BaseAddress,XUARTPS_TXWM_OFFSET, 0x20U);
	//#define XUARTPS_TXWM_OFFSET		0x0044U  /**< TX FIFO Trigger Level [5:0] */

	return XST_SUCCESS;

}

//1.2 UART-Send-Data ?
int Uart_SendData_test(void *InstancePtr){
	//u8 myArry[8] = "fuck you";

	MapToArray(TransmitBuffer, init_map);

	//做到這邊2023/12/10 接續完成uart資料轉換-並可以傳輸
	//TransmitBuffer
	while (TotalByteSend < (sizeof(TransmitBuffer))) {
			ByteSend = XUartPs_Send(&Uart_PS_1,(u8*)&TransmitBuffer[TotalByteSend], 1);
			TotalByteSend += ByteSend;
	}
	/*
	while (TotalByteSend < (sizeof(byteArray))) {
		ByteSend = XUartPs_Send(&Uart_PS_1,(u8*)&byteArray[TotalByteSend], 1);
		TotalByteSend += ByteSend;
	}
	*/
	/*
	while (TotalByteSend < (sizeof(myArry))) {
			ByteSend = XUartPs_Send(&Uart_PS_1,(u8*)&myArry[TotalByteSend], 1);
			TotalByteSend += ByteSend;
	}*/
	TotalByteSend = 0;
	return TotalByteSend;
}

//1.3 Make UART transmission content processing
//做到這邊2023/12/10 接續完成uart資料轉換-並可以傳輸
void MapToArray(u8 *byteArray, int map[Map1_HEIGHT][Map1_WIDTH]) {
	u16 i,j;
    for (i = 0; i < Map1_HEIGHT; i++) {
        for (j = 0; j < Map1_WIDTH; j++) {
            byteArray[i * Map1_WIDTH + j] = map[i][j];
        }
    }
}

//----------------------------------------------------
// 2. Button-interrupt-partial
//----------------------------------------------------

//2.1 完成button interrupt的初始化設定
int InterruptSystemSetup(XScuGic *XScuGicInstancePtr) {
	// Enable interrupt
	XGpio_InterruptEnable(&BTNInst, BTN_INT);
	XGpio_InterruptGlobalEnable(&BTNInst);

	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			(Xil_ExceptionHandler) XScuGic_InterruptHandler,
			XScuGicInstancePtr);
	Xil_ExceptionEnable();
	return XST_SUCCESS;

}

int IntcInitFunction_BTN(u16 DeviceId, XGpio *GpioInstancePtr) {
	XScuGic_Config *IntcConfig;
	int status;

	// Interrupt controller initialisation
	IntcConfig = XScuGic_LookupConfig(DeviceId);
	status = XScuGic_CfgInitialize(&INTCInst, IntcConfig,
			IntcConfig->CpuBaseAddress);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	// Call to interrupt setup
	status = InterruptSystemSetup(&INTCInst);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	// Connect GPIO interrupt to handler
	status = XScuGic_Connect(&INTCInst, INTC_GPIO_INTERRUPT_ID,
			(Xil_ExceptionHandler) BTN_Intr_Handler, (void *) GpioInstancePtr);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	// Enable GPIO interrupts interrupt
	XGpio_InterruptEnable(GpioInstancePtr, 1);
	XGpio_InterruptGlobalEnable(GpioInstancePtr);

	// Enable GPIO and timer interrupts in the controller
	XScuGic_Enable(&INTCInst, INTC_GPIO_INTERRUPT_ID);

	return XST_SUCCESS;
}

//2.2 Button interrupt時會作的內容
void BTN_Intr_Handler(void *InstancePtr) {

	// Disable GPIO interrupts
	XGpio_InterruptDisable(&BTNInst, BTN_INT);
	// Ignore additional button presses
	if ((XGpio_InterruptGetStatus(&BTNInst) & BTN_INT) != BTN_INT) {
		return;
	}
	btn_value = XGpio_DiscreteRead(&BTNInst, 1);
	// Increment counter based on button value
	// Reset if centre button pressed
	if(btn_value != 1){
		Uart_SendData_test(&Uart_PS_1);
		switch(btn_value){
			case 16:{
				led_data = btn_value;
				printf("\nGame Character Move UP : %d\n",btn_value);
				usleep(180000);
			}break;
			case 2:{
				led_data = btn_value;
				printf("\nGame Character Move Down : %d\n",btn_value);
				usleep(180000);
			}break;
			case 4:{
				led_data = btn_value;
				printf("\nGame Character Move Left : %d\n",btn_value);
				usleep(180000);
			}break;
			case 8:{
				led_data = btn_value;
				printf("\nGame Character Move Right : %d\n",btn_value);
				usleep(180000);
			}break;
			case 0:{
				led_data = btn_value;
				printf("\nReset Game Map : %d\n",btn_value);
				usleep(180000);
			}break;
			default:{
				printf("Error : Unknown btn_value");
			}break;
		}
	}else{
		led_data = 0;
	}
	XGpio_DiscreteWrite(&LEDInst, 1, led_data);
	(void) XGpio_InterruptClear(&BTNInst, BTN_INT);
	// Enable GPIO interrupts
	XGpio_InterruptEnable(&BTNInst, BTN_INT);
}
